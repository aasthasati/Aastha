# -*- coding: utf-8 -*-
"""MiniProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MDY5Cm8QYkYJTj2waqQah8vMW1j2tZK_
"""

import pandas as pd
import numpy as np
import io
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.metrics import confusion_matrix, make_scorer
from sklearn.model_selection import cross_validate
from sklearn.metrics import accuracy_score
from sklearn.neighbors import KNeighborsClassifier





from google.colab import files
uploaded = files.upload()

df=pd.read_csv(io.BytesIO(uploaded['data.csv']))

df.head

df=df.drop(columns=["Unnamed: 32"])

#Random Sampling
df=df.sample(frac=1)

# Quartile range
Q1 = df.quantile(0.25)
Q3 = df.quantile(0.75)
inter_quartile_range = Q3 - Q1

# quartiles and interquartile range

df_out = df[~((df < (Q1 - (1.5 * inter_quartile_range))) | (df > (Q3 + (1.5 * inter_quartile_range)))).any(axis=1)]

# Label Encoding
# Converting the Maligant(M) to 1 and Benign(B) to 0
label = LabelEncoder()
df.iloc[:,1] = label.fit_transform(df.iloc[:,1].values)

#Column Selection
X = df_out.drop(columns=['diagnosis'])
y = df_out['diagnosis']


# Spilt Train and Test Model
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

# Confusion Matrix
def tp(y_true, y_pred):
    return confusion_matrix(y_true, y_pred)[0, 0]


def fp(y_true, y_pred):
    return confusion_matrix(y_true, y_pred)[0, 1]


def fn(y_true, y_pred):
    return confusion_matrix(y_true, y_pred)[1, 0]


def tn(y_true, y_pred):
    return confusion_matrix(y_true, y_pred)[1, 1]

def acc(y_true, y_pred):
    return accuracy(y_true, y_pred)

def accuracy(y_true, y_pred):
    cnf_matrix = confusion_matrix(y_true, y_pred)
    N = sum(map(sum, cnf_matrix))
    tp = cnf_matrix[0, 0]
    tn = cnf_matrix[1, 1]
    return round((tp + tn) / N, 2)


# Cross Validation
scoring = {'accuracy': make_scorer(metrics.accuracy_score), 'prec': 'precision'}
scoring = {'tp': make_scorer(tp), 'tn': make_scorer(tn),
           'fp': make_scorer(fp), 'fn': make_scorer(fn),
           'acc': make_scorer(acc)}

def print_result(result):
    print("True Positive: ", result['test_tp'])
    print("True Negative: ", result['test_tn'])
    print("False Negative: ", result['test_fn'])
    print("False Positive: ", result['test_fp'])
    print("Accuracy: ", result['test_acc'])



# K Neighbor Classifier
model = KNeighborsClassifier(n_neighbors=9, n_jobs=-1)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
y_pred_train = model.predict(X_train)

ac = accuracy_score(y_test, y_pred)
ac_train = accuracy_score(y_train, y_pred_train)


print("\nKNeighbors Classifier : ")
print("Training Accuracy : ", ac_train)
print("Test Accuracy :",ac)
print("Cross Validation:")
result = cross_validate(model, X_train, y_train, scoring=scoring, cv=10)
print_result(result)